name: 'Prep Repo for Automerge PR'
description: 'Prepares a repository to perform automerge PRs. Used with auto dependency updating'
inputs:
  repo-owner: # owner of the repo
    description: 'Owner/namespace of the target repository'
    required: true
    default: ${{ github.repository_owner }}
  repo-name:
    description: 'Target repository name'
    required: true
    default: ${{ github.event.repository.name }}
  github-token:
    description: 'Github token to the repository so we can work with the github api. Typically GITHUB_TOKEN'
    required: true
  status-checks:
    description: 'Comma seperated list of status checks that must pass for the PR to be accepted. Defaults to `platformsh,TestPrEnvironment`'
    required: false
    # platformsh is always added, so this is just the extras
    default: 'TestPrEnvironment'
outputs:
  default-branch:
    description: "The default branch for the repository"
    value: ${{ steps.defaultbranch.outputs.branch }}

runs:
  using: "composite"
  steps:
    - name: 'Set up Github token'
      id: setup-gh-token
      shell: bash
      run: echo "GITHUB_TOKEN=${{ inputs.github-token }}" >> $GITHUB_ENV
    - name: 'Parse status checks'
      id: parse-status-checks
      shell: bash
      run: |
        statusChecks=${{ inputs.status-checks }}
        #ok, let's see if they included `platformsh` even though we told them not to
        # no word boundaries in bash so we have to fake it
        pshPattern="(^|,)(platformsh(,|$))"
        if ! [[ ${statusChecks} =~ ${pshPattern} ]]; then
          #good, they didnt include it, so let's add it to what they gave us
          statusChecks="platformsh,${statusChecks}"
        fi
        echo "::set-output name=statuschecks::${statusChecks}"
    # 1. Make sure the template repo exists
    - name: Step 1. Verify the repo exists
      id: template-repo-exists
      shell: bash
      run: |
        # Why curl instead of the gh cli? Because on not found, the gh cli will return an exit code of 1 which immediately fails the step and the job
        repoData=$(curl -s -H "Authorization: token $GITHUB_TOKEN" https://api.github.com/repos/${{ inputs.repo-owner }}/${{ inputs.repo-name }})
        repoID=$(echo "$repoData" | jq '.id')
        repoNodeID=$(echo "$repoData" | jq '.node_id')
        repoFound=$(echo "$repoData" | jq '.message')
        echo "::notice::Repo Found status - ${repoFound}"
        if [[ -z ${repoID} || "${repoFound}" == '"Not Found"'  ]]; then
          message="The template repo for ${{ inputs.repo-name }} doesn't exist and will need to be created before I can help you."
          echo "::error::${message}"
          echo "SLACK_MSG=${message}" >> $GITHUB_ENV
          echo "SLACK_PRURL=no-pr" >> $GITHUB_ENV
          echo "SLACK_STATUS=skip" >> $GITHUB_ENV
          exit 11;
        else
          echo "::set-output name=repoNodeID::${repoNodeID}"
        fi
    # 2. Verify the repository is set for automerge
    - name: Step 2. Check if auto-merge is enabled for repository
      shell: bash
      run: |
        autoMREnabled=$(gh api /repos/${{ inputs.repo-owner }}/${{ inputs.repo-name }} --jq '.allow_auto_merge')
        if [[ "${autoMREnabled}" != "true" ]]; then
          gh api -X PATCH /repos/${{ inputs.repo-owner }}/${{ inputs.repo-name }} --field allow_auto_merge=true
        fi

    #3. Get the template repo's default branch
    - name: Step 3. Get template default branch
      id: defaultbranch
      shell: bash
      run: |
        # Get the default branch.
        DEFAULT_BRANCH=$(gh api /repos/${{ inputs.repo-owner }}/${{ inputs.repo-name }} --jq '.default_branch')
        echo "Our default branch for this template is ${DEFAULT_BRANCH}"
        echo "::set-output name=branch::$DEFAULT_BRANCH"

    # 4. Create branch protection if does not exist on the default branch; update to latest version.
    - name: Step 4. Check if template already has a protection rule on default branch
      id: get-branch-protection-rule
      shell: bash
      run: |
        # Step 4a - See if the protection needs to be created.
        defaultBranch=${{ steps.defaultbranch.outputs.branch }}
        repoNodeID=${{ steps.template-repo-exists.outputs.repoNodeID }}
        protectionCheckQuery='
        query($name: String!, $owner: String!) {
            repository(owner: $owner, name: $name) {
                branchProtectionRules(first:10) {
                    nodes {
                        id
                        pattern
                        requiredStatusCheckContexts
                    }
                }
            }
        }
        '
        RESULT=$(gh api graphql -F owner="${{ inputs.repo-owner }}" -F name="${{ inputs.repo-name }}" -f query="${protectionCheckQuery}")
        defaultBranchProtectionRule=$(echo $RESULT | jq --arg DEFAULT_BRANCH "$defaultBranch" '.data.repository.branchProtectionRules.nodes[] | select(.pattern==$DEFAULT_BRANCH)')

        # Step 4b - Create the protection if it doesn't exist.
        protectionID=$(echo "${defaultBranchProtectionRule}" | jq -r '.id')
        #I don't remember why we originally went with a strlen > 0 vs [[ -n "${protectionID}" ]]
        if (( ${#protectionID} > 0 )); then
          updateNeeded='no'
          # We have a rule, but does it include the minimum setup we need?
          # * requiresStatusChecks=true
          # * requiresStrictStatusChecks: true
          # * requiredStatusCheckContexts = includes at least platformsh
          # * requiresApprovingReviews
          # for each required check we need, let's see if they have it before we alter the rule, and if not, warn them
          requiredChecks=("requiresStatusChecks" "requiresStrictStatusChecks" "requiresApprovingReviews")
          genWarn="You do not currently have %s set as true for protection rule ID"
          genWarn=$(printf "%s %s on branch %s. " "${genWarn}" "${protectionID}" "${defaultBranch}")
          genWarn="${genWarn}I must set it to true in order for the auto-merge PR to work correctly. If you believe"
          genWarn="${getWarn} this is in error, please contact devrel@platform.sh"

          for check in "${requiredChecks[@]}"; do
            testCheck=$(echo "${defaultBranchProtectionRule}" | jq -r ".${check}");
            if [[ "true" != "${testCheck}" ]]; then
              message=$(printf "${genMsg}" "${check}")
              updateNeeded='yes'
              echo "::error line=131::value of Check is ${check}"
              echo "::error line=132::value of testCheck ${testCheck}"
              echo "::error line=133::value of defaultBranchProtectionRule : ${defaultBranchProtectionRule}"
              echo "::error::${genWarn}"
            fi
          done;

          #done warning them, now we need to check the status check array to see if we need to merge
          IFS=',' read -r -a currentStatusChecks < <(echo "${defaultBranchProtectionRule}" | jq -r '.requiredStatusCheckContexts | join(",")')

          # now we need to compare that to our status checks. Ours is also seperated with a comma
          IFS=',' read -r -a neededStatusChecks < <(echo "${{ steps.parse-status-checks.outputs.statuschecks }}")

          # now we need to combine them, and only keep what is unique. Since we KNOW ours has platformsh, we shouldnt
          # need to test for it again. I was unable to figure out another method in bash to array merge keeping only uniques
          IFS=$'\n'
          combinedChecks=($(for item in "${neededStatusChecks[@]}" "${currentStatusChecks[@]}"; do echo "${item}"; done | sort -u))

          #now sort the original so we can see if they are identical
          IFS=$'\n' currentStatusChecks=($(sort <<<"${currentStatusChecks[*]}"))
          unset IFS

          #do we need to update the rule?
          if [[ "${combinedChecks[*]}" != "${currentStatusChecks[*]}" || "yes" == "${updateNeeded}" ]]; then
            printf "\n%s: the default branch protection rules for branch %s need updating.\n" "${{ inputs.repo-name }}" "${defaultBranch}"
            #We need to convert our list of status checks back to a string of double quoted items seperated by a comma
            #first back to a comma seperated string
            statusChecks=$( IFS=','; echo "${combinedChecks[*]}")
            #and now add the quotes
            statusChecks="\"${statusChecks//,/\",\"}\""
            branchProtectionRule="
                mutation(\$branchProtectionRuleId:ID!,\$branch:String!) {
                    updateBranchProtectionRule(input: {
                    branchProtectionRuleId: \$branchProtectionRuleId
                    pattern: \$branch
                    requiresStatusChecks: true
                    requiresStrictStatusChecks: true
                    requiredStatusCheckContexts: [${statusChecks}]
                    requiresApprovingReviews: true
                    requiredApprovingReviewCount: 0
                    isAdminEnforced: true
                    }) { clientMutationId }
                }
            "
            # @todo Should we test to see if the mutation failed?
            # also, we could potentially combine this call and the create branch call into one command
            gh api graphql -F branchProtectionRuleId="${protectionID}" -F branch="${defaultBranch}" -f query="${branchProtectionRule}"
          fi

        else
          printf "\n%s: the default branch (%s) is NOT protected. Creating protection.\n" "${{ inputs.repo-name }}" "${defaultBranch}"
          branchProtectionRule="
              mutation(\$repositoryId:ID!,\$branch:String!) {
                  createBranchProtectionRule(input: {
                  repositoryId: \$repositoryId
                  pattern: \$branch
                  requiresStatusChecks: true
                  requiresStrictStatusChecks: true
                  requiredStatusCheckContexts: [${statusChecks}]
                  requiresApprovingReviews: true
                  requiredApprovingReviewCount: 0
                  isAdminEnforced: true
                  }) { clientMutationId }
              }
          "
          # @todo Should we test to see if the mutation failed?
          gh api graphql -F repositoryId="${repoNodeID}" -F branch="${defaultBranch}" -f query="${branchProtectionRule}"
          RESULT=$(gh api graphql -F owner="${{ inputs.repo-owner }}" -F name="${{ inputs.repo-name }}" -f query="${protectionCheckQuery}")
          DEFAULT_BRANCH_PROTECTION=$(echo $RESULT | jq --arg DEFAULT_BRANCH "$defaultBranch" '.data.repository.branchProtectionRules.nodes[] | select(.pattern==$DEFAULT_BRANCH)')
          PROTECTION_ID=$(echo $DEFAULT_BRANCH_PROTECTION | jq -r '.id')
          printf "\n%s: the default branch (%s) is protected (%s).\n" "${1}" "${defaultBranch}" "${PROTECTION_ID}"
        fi
